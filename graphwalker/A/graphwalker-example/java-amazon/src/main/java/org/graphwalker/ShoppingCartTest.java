package org.graphwalker;

import org.graphwalker.core.machine.ExecutionContext;
import org.graphwalker.java.annotation.GraphWalker;
import org.junit.Assert;
import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.firefox.FirefoxDriver;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * See: http://graphwalker.org/docs/maven_archetype for more details
 *
 * Implements the GraphWalker model: src/main/resources/SmallTest.graphml
 * The SmallTest.graphml can be opened and edited using http://www.yworks.com/en/products/yfiles/yed/
 *
 * For convienicene, a jpg image exists side-by-side in the same folder.
 *
 * The @GraphWalker annotation, has the following meaning:
 * 1) value defines the generator of this test. Please read more
 *    on the subject at: http://graphwalker.org/docs/path_generators_and_stop_conditions
 * 2) start defines the first element in the model to be executed. (Element is
 *    either a vertex or an edge)
 *
 * The interface SmallTest, that SomeSmallTest implements, is generated by
 * running: mvn graphwalker:generate-sources
 * also: mvn graphwalker:test
 *
 */
@GraphWalker(value = "random(edge_coverage(100))", start = "e_StartBrowser")
public class ShoppingCartTest extends ExecutionContext implements ShoppingCart {

    WebDriver driver = null;

    public void e_ClickBook() {
        driver.findElement(By.linkText("Practical Model-Based Testing: A Tools Approach")).click();
    }

    public void e_AddBookToCart() {
        driver.findElement(By.id("add-to-cart-button")).click();
    }

    public void v_BookInformation() {

    }

    public void v_OtherBoughtBooks() {
        Assert.assertTrue(verifyTextPresent("Added to Cart"));
    }

    public void e_StartBrowser() {
        driver = new FirefoxDriver();
    }

    public void v_SearchResult() {
        Assert.assertTrue(driver.findElement(By.linkText("Practical Model-Based Testing: A Tools Approach")) != null);
    }

    public void v_ShoppingCart() {
        Assert.assertTrue(driver.getTitle().matches("^Amazon\\.com Shopping Cart.*"));
        Integer expected_num_of_books = ((Double)getAttribute("num_of_books")).intValue();
        Integer actual_num_of_books = null;

        if (expected_num_of_books == 0) {
            Assert.assertTrue(verifyTextPresent("Your Shopping Cart is empty"));
            return;
        }

        String itemsInCart = driver.findElement(By.id("gutterCartViewForm")).getText();
        Pattern pattern = Pattern.compile("Subtotal \\(([0-9]+) items*\\):", Pattern.MULTILINE);
        Matcher matcher = pattern.matcher(itemsInCart);
        if (matcher.find()) {
            actual_num_of_books = Integer.valueOf(matcher.group(1));
        }
        Assert.assertEquals(expected_num_of_books, actual_num_of_books);
    }

    public void e_EnterBaseURL() {
        driver.get("http://www.amazon.com");
    }

    public void v_BaseURL() {
        Assert.assertTrue(driver.getTitle().matches("^Amazon\\.com: .*"));
    }

    public void v_BrowserStarted() {
        Assert.assertNotNull(driver);
    }

    public void e_SearchBook() {
        WebElement element;
        element = driver.findElement(By.id("twotabsearchtextbox"));
        element.clear();
        element.sendKeys("Model-based testing");
        try {
            driver.findElement(By.className("nav-input")).click();
        } catch (NoSuchElementException e) {
            driver.findElement(By.xpath("//*[@class='nav-submit-button nav-sprite']/input")).click();
        }
    }

    public void e_ShoppingCart() {
        try {
            driver.findElement(By.cssSelector("#navCartEmpty > a.destination > span.text")).click();
        } catch (NoSuchElementException e) {
            try {
                driver.findElement(By.cssSelector("a.destination.count")).click();
            } catch (NoSuchElementException e1) {
                driver.findElement(By.xpath("//*[@id='nav-cart-count']")).click();
            }
        }
    }

    /**
     * Got this from:
     * http://www.seleniumwiki.com/webdriver/using-verifytextpresent-in-selenium-2-webdriver/
     *
     * @param text The text to verify
     * @return true if the test is present on the web page
     * @throws InterruptedException
     */
    public boolean verifyTextPresent(String text) {
        long end = System.currentTimeMillis() + 5000;
        while (System.currentTimeMillis() < end) {
            if (driver.findElements(By.xpath("//*[contains(text(),\"" + text + "\")]")).size() > 0) {
                return true;
            }
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        return false;
    }
}
